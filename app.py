# Импорт необходимых библиотек
import requests  # Библиотека для выполнения HTTP-запросов
import pandas as pd  # Библиотека для работы с данными в табличном формате
import typer  # Библиотека для создания командной строки (CLI) интерфейса

def main(q: str = "cursor"):
    """
    Основная функция приложения для поиска статей на Hacker News
    
    Args:
        q (str): Поисковый запрос. По умолчанию "cursor"
    
    Returns:
        None: Функция выводит результаты в консоль
    """
    
    # URL API Hacker News (использует Algolia для поиска)
    url = "https://hn.algolia.com/api/v1/search"
    
    # Выполняем GET-запрос к API с параметрами:
    # - query: поисковый запрос
    # - tags: фильтр по тегу "story" (только статьи, не комментарии)
    # - timeout: максимальное время ожидания ответа (20 секунд)
    r = requests.get(url, params={"query": q, "tags": "story"}, timeout=20)
    
    # Проверяем, что запрос выполнился успешно (статус 200-299)
    # Если статус не успешный, вызовет исключение HTTPError
    r.raise_for_status()
    
    # Получаем JSON-ответ и извлекаем массив "hits" (результаты поиска)
    # Берем только первые 10 результатов для ограничения вывода
    hits = r.json().get("hits", [])[:10]
    
    # Преобразуем каждый результат в словарь с нужными полями:
    # - title: заголовок статьи
    # - points: количество очков (рейтинг)
    # - url: ссылка на статью
    # Используем .get() с значением по умолчанию для безопасного извлечения данных
    rows = [{"title": h.get("title"), "points": h.get("points", 0), "url": h.get("url")} for h in hits]
    
    # Создаем DataFrame из полученных данных для красивого вывода в табличном формате
    df = pd.DataFrame(rows)
    
    # Выводим DataFrame в консоль без индексов строк для чистоты вывода
    print(df.to_string(index=False))

# Точка входа в приложение
# Проверяем, что скрипт запущен напрямую (не импортирован как модуль)
if __name__ == "__main__":
    # Запускаем CLI-приложение с помощью typer
    # typer автоматически создаст интерфейс командной строки для функции main
    # Пользователь сможет передавать аргументы: python app.py "python"
    typer.run(main)
    #напиши
